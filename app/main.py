import csv
from modules.model import Model
from dotenv import load_dotenv
import telebot
from telebot import types
import os
import re  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
from fuzzywuzzy import fuzz

load_dotenv()

TELEGRAM_TOKEN = "7882340349:AAF0DsxE9YIFSX9Dtx01DsY321n6JQs7EkU"
MISTAL_API = "K4zGEUUJAQbeC8E2j0SDd4mRAVTwe5OT"
OPENAI_API_TOKEN = os.getenv("OPENAI API TOKEN")
CSV_FILE = "user_feedback.csv"
METADATA_FILE = "metadata.csv"

bot = telebot.TeleBot(TELEGRAM_TOKEN)
model = Model(MISTAL_API)

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã)
user_states = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å"
def create_availability_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    check_availability_button = types.KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å")
    keyboard.add(check_availability_button)
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã "–ø–∞–ª–µ—Ü –≤–≤–µ—Ä—Ö" –∏ "–ø–∞–ª–µ—Ü –≤–Ω–∏–∑"
def create_feedback_keyboard(selected=None):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    if selected == "thumbs_up":
        thumbs_up = types.InlineKeyboardButton("üëç –í—ã –≤—ã–±—Ä–∞–ª–∏", callback_data="thumbs_up_selected")
        thumbs_down = types.InlineKeyboardButton("üëé", callback_data="thumbs_down")
    elif selected == "thumbs_down":
        thumbs_up = types.InlineKeyboardButton("üëç", callback_data="thumbs_up")
        thumbs_down = types.InlineKeyboardButton("üëé –í—ã –≤—ã–±—Ä–∞–ª–∏", callback_data="thumbs_down_selected")
    else:
        thumbs_up = types.InlineKeyboardButton("üëç", callback_data="thumbs_up")
        thumbs_down = types.InlineKeyboardButton("üëé", callback_data="thumbs_down")

    keyboard.add(thumbs_up, thumbs_down)
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏—á–∏–Ω
def create_reason_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    reason_1 = types.InlineKeyboardButton("–ü–æ–ª–Ω–æ—Å—Ç—å—é –º–∏–º–æ", callback_data="reason_miss")
    reason_2 = types.InlineKeyboardButton("–í —Ü–µ–ª–æ–º –≤–µ—Ä–Ω–æ, –Ω–æ –≤–æ–ø—Ä–æ—Å –±—ã–ª –Ω–µ –≤ —ç—Ç–æ–º", callback_data="reason_partial")
    reason_3 = types.InlineKeyboardButton("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫", callback_data="reason_incorrect_source")  # –ò–∑–º–µ–Ω–µ–Ω–æ
    reason_4 = types.InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="reason_other")
    keyboard.add(reason_1, reason_2, reason_3, reason_4)
    return keyboard


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ CSV
def save_feedback_to_csv(user_id, user_query, bot_response, rating, reason=None):
    with open(CSV_FILE, mode='a', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        writer.writerow([user_id, user_query, bot_response, rating, reason])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
def clean_text(text):
    return re.sub(r'[^\w\s]', '', text.lower())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è metadata.csv –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–ø–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Å—Ç–æ–ª–±—Ü–æ–≤ "Name" –∏ "URL" —Å –æ—á–∏—Å—Ç–∫–æ–π —Ç–µ–∫—Å—Ç–∞
def load_metadata():
    metadata = []
    with open(METADATA_FILE, mode='r', newline='', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        for row in reader:
            metadata.append({"name": clean_text(row['Name']).strip(), "url": row['URL']})
    return metadata

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –∫–æ–Ω—Å–æ–ª–∏
def log_name_search(user_id, user_query, response, name_found):
    if name_found:
        print(f"User ID: {user_id}, Query: '{user_query}', Response: '{response}', Name Found: '{name_found}'")
    else:
        print(f"User ID: {user_id}, Query: '{user_query}', Response: '{response}', Name Found: None")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message, "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞.", reply_markup=create_availability_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å"
@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å")
def check_availability(message):
    bot.reply_to(message, "–ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω. –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.", reply_markup=create_availability_keyboard())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ "–ò—Å—Ç–æ—á–Ω–∏–∫:"
def extract_source_text(response):
    match = re.search(r'–ò—Å—Ç–æ—á–Ω–∏–∫: (.+)', response)  # –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ "–ò—Å—Ç–æ—á–Ω–∏–∫:"
    if match:
        return match.group(1).strip()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ "–ò—Å—Ç–æ—á–Ω–∏–∫:"
    return None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: not user_states.get(message.from_user.id, {}).get('waiting_for_availability', False))
def echo_all(message):
    loading_message = bot.send_message(message.chat.id, "–§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        response = model.process_user_query(message.text)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ "–ò—Å—Ç–æ—á–Ω–∏–∫:"
        source_text = extract_source_text(response)

        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ "–ò—Å—Ç–æ—á–Ω–∏–∫:" –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–µ–º—É
        if source_text:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–º–µ–Ω–∞ –∏ —Å—Å—ã–ª–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ metadata.csv
            metadata = load_metadata()

            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
            source_text_cleaned = clean_text(source_text)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å metadata.csv
            name_found = None
            url_found = None
            print(f"–ò—â–µ–º –≤ —Å—Ç—Ä–æ–∫–µ: '{source_text_cleaned}'")
            for entry in metadata:
                similarity = fuzz.token_set_ratio(entry['name'], source_text_cleaned)
                if similarity >= 80:  # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏
                    name_found = entry['name']
                    url_found = entry['url']
                    print(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ø–æ—Ö–æ–∂–µ—Å—Ç—å—é {similarity}%: '{entry['name']}'")
                    break

            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            if name_found and url_found:
                response = re.sub(r'–ò—Å—Ç–æ—á–Ω–∏–∫: .+', f'–ò—Å—Ç–æ—á–Ω–∏–∫: <a href="{url_found}">—Å—Å—ã–ª–∫–∞</a>', response, flags=re.IGNORECASE)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç..."
        bot.delete_message(message.chat.id, loading_message.message_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML –¥–ª—è —Å—Å—ã–ª–æ–∫)
        bot.send_message(message.chat.id, response, reply_markup=create_feedback_keyboard(), parse_mode="HTML")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[message.from_user.id] = {'query': message.text, 'response': response}

        # –õ–æ–≥–≥–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –∫–æ–Ω—Å–æ–ª–∏
        log_name_search(message.from_user.id, message.text, response, name_found)

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
        if name_found:
            print(f"–ù–∞–π–¥–µ–Ω–æ –∏–º—è '{name_found}' –∏–∑ metadata.csv, —Å—Å—ã–ª–∫–∞: {url_found}")
        else:
            print("–ò–º—è –∏–∑ metadata.csv –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ.")
    except BaseException as error:
        print(f'An exception occurred: {error}')
        bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ò–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–ø–∞–ª–µ—Ü –≤–≤–µ—Ä—Ö" –∏ "–ø–∞–ª–µ—Ü –≤–Ω–∏–∑"
@bot.callback_query_handler(func=lambda call: call.data in ["thumbs_up", "thumbs_down"])
def handle_feedback(call):
    user_id = call.from_user.id
    if call.data == "thumbs_up":
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      reply_markup=create_feedback_keyboard(selected="thumbs_up"))
        bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! üëç")
        save_feedback_to_csv(user_id, user_states[user_id]['query'], user_states[user_id]['response'], "thumbs_up")
    elif call.data == "thumbs_down":
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      reply_markup=create_feedback_keyboard(selected="thumbs_down"))
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞:",
                         reply_markup=create_reason_keyboard())
        user_states[user_id]['waiting_for_reason'] = True


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("reason_"))
def handle_reason_selection(call):
    user_id = call.from_user.id
    if 'waiting_for_reason' in user_states[user_id]:
        reason = call.data.split("_")[1]
        reason_mapping = {
            "miss": "–ü–æ–ª–Ω–æ—Å—Ç—å—é –º–∏–º–æ",
            "partial": "–í —Ü–µ–ª–æ–º –≤–µ—Ä–Ω–æ, –Ω–æ –≤–æ–ø—Ä–æ—Å –±—ã–ª –Ω–µ –≤ —ç—Ç–æ–º",
            "incorrect_source": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫",
            "other": "–î—Ä—É–≥–æ–µ"
        }

        reason_text = reason_mapping.get(reason, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω—ã
        bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∏—á–∏–Ω—É: {reason_text}. –°–ø–∞—Å–∏–±–æ, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É.")

        save_feedback_to_csv(user_id, user_states[user_id]['query'], user_states[user_id]['response'], "thumbs_down",
                             reason_text)
        user_states[user_id].pop('waiting_for_reason', None)
        bot.answer_callback_query(call.id)


bot.polling()
